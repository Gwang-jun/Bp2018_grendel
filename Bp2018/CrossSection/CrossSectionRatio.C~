#include "uti.h"
#include "parameters.h"
#include "TLegendEntry.h"
#include "../Systematics/systematics.C"
float tpadr = 0.7;
bool addpbpb = 0;

void CrossSectionRatio(TString inputFONLL="", TString input="", TString efficiency="",TString outputplot="",int usePbPb=1,TString label="PbPb",int doDataCor = 0,double lumi=1.,Float_t centMin=0.,Float_t centMax=90.)
{
	gStyle->SetOptTitle(0);
	gStyle->SetOptStat(0);
	gStyle->SetEndErrorSize(0);
	gStyle->SetMarkerStyle(20);

	/*
	TFile* filenominal1 = new TFile("ptshape/BDT/CrossSectionPbPb_nominal_Cent0-90.root");
	TFile* filenoweight1 = new TFile("ptshape/BDT/CrossSectionPbPb_noweight_Cent0-90.root");
	TFile* fileplus1 = new TFile("ptshape/BDT/CrossSectionPbPb_plus_Cent0-90.root");
	TFile* fileminus1 = new TFile("ptshape/BDT/CrossSectionPbPb_minus_Cent0-90.root");
	TH1D* hnominal1 = (TH1D*)filenominal1->Get("hPtSigma");
	TH1D* hnoweight1 = (TH1D*)filenoweight1->Get("hPtSigma");
	TH1D* hplus1 = (TH1D*)fileplus1->Get("hPtSigma");
	TH1D* hminus1 = (TH1D*)fileminus1->Get("hPtSigma");
	double nominal1Err;
	double nominal1 = hnominal1->IntegralAndError(5,60,nominal1Err,"width");
	double noweight1Err;
	double noweight1 = hnoweight1->IntegralAndError(5,60,noweight1Err,"width");
	double plus1Err;
	double plus1 = hplus1->IntegralAndError(5,60,plus1Err,"width");
	double minus1Err;
	double minus1 = hminus1->IntegralAndError(5,60,minus1Err,"width");
	double ptshapenoweight1 = noweight1/nominal1;
	double ptshapenoweight1Err = ptshapenoweight1*sqrt((noweight1Err/noweight1)*(noweight1Err/noweight1)+(nominal1Err/nominal1)*(nominal1Err/nominal1));
	double ptshapeplus1 = plus1/nominal1;
	double ptshapeplus1Err = ptshapeplus1*sqrt((plus1Err/plus1)*(plus1Err/plus1)+(nominal1Err/nominal1)*(nominal1Err/nominal1));
	double ptshapeminus1 = minus1/nominal1;
	double ptshapeminus1Err = ptshapeminus1*sqrt((minus1Err/minus1)*(minus1Err/minus1)+(nominal1Err/nominal1)*(nominal1Err/nominal1));

	double ptshape1, ptshape1Err;
	ptshape1 = ptshapenoweight1;
	ptshape1Err = ptshapenoweight1Err;
	std::cout<<"ptshape uncertainty: "<<(ptshape1-1.0)*100<<"%"<<std::endl;
	
	
	TFile* filenominal2 = new TFile("ptshape/BDT/CrossSectionPbPb_nominal_Cent30-90.root");
	TFile* filenoweight2 = new TFile("ptshape/BDT/CrossSectionPbPb_noweight_Cent30-90.root");
	TFile* fileplus2 = new TFile("ptshape/BDT/CrossSectionPbPb_plus_Cent30-90.root");
	TFile* fileminus2 = new TFile("ptshape/BDT/CrossSectionPbPb_minus_Cent30-90.root");
	TH1D* hnominal2 = (TH1D*)filenominal2->Get("hPtSigma");
	TH1D* hnoweight2 = (TH1D*)filenoweight2->Get("hPtSigma");
	TH1D* hplus2 = (TH1D*)fileplus2->Get("hPtSigma");
	TH1D* hminus2 = (TH1D*)fileminus2->Get("hPtSigma");
	double nominal2Err;
	double nominal2 = hnominal2->IntegralAndError(5,60,nominal2Err,"width");
	double noweight2Err;
	double noweight2 = hnoweight2->IntegralAndError(5,60,noweight2Err,"width");
	double plus2Err;
	double plus2 = hplus2->IntegralAndError(5,60,plus2Err,"width");
	double minus2Err;
	double minus2 = hminus2->IntegralAndError(5,60,minus2Err,"width");
	double ptshapenoweight2 = noweight2/nominal2;
	double ptshapenoweight2Err = ptshapenoweight2*sqrt((noweight2Err/noweight2)*(noweight2Err/noweight2)+(nominal2Err/nominal2)*(nominal2Err/nominal2));
	double ptshapeplus2 = plus2/nominal2;
	double ptshapeplus2Err = ptshapeplus2*sqrt((plus2Err/plus2)*(plus2Err/plus2)+(nominal2Err/nominal2)*(nominal2Err/nominal2));
	double ptshapeminus2 = minus2/nominal2;
	double ptshapeminus2Err = ptshapeminus2*sqrt((minus2Err/minus2)*(minus2Err/minus2)+(nominal2Err/nominal2)*(nominal2Err/nominal2));

	double ptshape2, ptshape2Err;
	ptshape2 = ptshapenoweight2;
	ptshape2Err = ptshapenoweight2Err;
	std::cout<<"ptshape uncertainty: "<<(ptshape2-1.0)*100<<"%"<<std::endl;
	

	TH1D* ptshapenoweightCent = new TH1D("","",nBinsCent,ptBinsCent);
	ptshapenoweightCent->GetXaxis()->CenterTitle();
	ptshapenoweightCent->GetYaxis()->CenterTitle();
	ptshapenoweightCent->GetXaxis()->SetTitle("hiBin");
	ptshapenoweightCent->GetYaxis()->SetTitle("Corrected yield Ratio");
	ptshapenoweightCent->GetXaxis()->SetTitleOffset(0.9);
	ptshapenoweightCent->GetYaxis()->SetTitleOffset(0.95);
	ptshapenoweightCent->GetXaxis()->SetTitleSize(0.05);
	ptshapenoweightCent->GetYaxis()->SetTitleSize(0.05);
	ptshapenoweightCent->GetXaxis()->SetTitleFont(42);
	ptshapenoweightCent->GetYaxis()->SetTitleFont(42);
	ptshapenoweightCent->GetXaxis()->SetLabelFont(42);
	ptshapenoweightCent->GetYaxis()->SetLabelFont(42);
	ptshapenoweightCent->GetXaxis()->SetLabelSize(0.035);
	ptshapenoweightCent->GetYaxis()->SetLabelSize(0.035);
	ptshapenoweightCent->SetLineColor(kBlue);

	ptshapenoweightCent->SetBinContent(1,ptshapenoweight1);
	ptshapenoweightCent->SetBinError(1,ptshapenoweight1Err);
	//ptshapenoweightCent->SetBinContent(2,ptshapenoweight2);
	//ptshapenoweightCent->SetBinError(2,ptshapenoweight2Err);

	TCanvas* cptshape = new TCanvas("","",600,600);
	cptshape->cd();
	ptshapenoweightCent->SetMaximum(1.5);
	ptshapenoweightCent->SetMinimum(0.5);
	ptshapenoweightCent->Draw("ep");

	TLegend *leg100 = new TLegend(0.45,0.70,0.75,0.80,NULL,"brNDC");
	leg100->SetBorderSize(0);
	leg100->SetTextSize(0.04);
	leg100->SetTextFont(42);
	leg100->SetFillStyle(0);
	leg100->AddEntry(ptshapenoweightCent,"Data/MC noweight","l");
	leg100->Draw("same");

	cptshape->SaveAs("ptshape/ptshape_Cent2_BDT_datadriven.png");
	cptshape->SaveAs("ptshape/ptshape_Cent2_BDT_datadriven.pdf");
	*/

	std::cout<<"step1"<<std::endl;

        TFile* fileReference = new TFile(inputFONLL.Data());
        TGraphAsymmErrors* gaeBplusReference = (TGraphAsymmErrors*)fileReference->Get("gaeSigmaBplus");

        if (!(usePbPb==1||usePbPb==0)) std::cout<<"ERROR!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!, you are using a non valid isPbPb option"<<std::endl;
        bool isPbPb=(bool)(usePbPb);

        float tpadpos = 1-tpadr;
        if(!isPbPb) tpadr = 1;

	//TFile* file = new TFile(input.Data());
	TFile* file = new TFile("unbinnedfiles/yields_Bp_binned_pt_Bsbin_Cent0-90.root");
	TFile* fileeff = new TFile(efficiency.Data());
	TFile* fileinveff = new TFile("ROOTfiles/MCstudiesPbPbAverage_0.5GeVBsbin_Cent0-90.root");
	TH1F* hPtSigma = (TH1F*)file->Get("hPt");
	TH1F* hEff = (TH1F*)fileeff->Get("hEff");
	TH1F* hinvEff = (TH1F*)fileinveff->Get("invEffave");
	//if(doDataCor != 1) hPtSigma->Divide(hEff);
	hPtSigma->Multiply(hinvEff);
	//hPtSigma->Scale(1./(2*lumi*BRchain));

	float taa = 6.274;//0-90
	//float taa = 15.41;//0-30
	//float taa = 1.705;//30-90

	hPtSigma->Scale(1./(2*taa*BRchain));
	hPtSigma->SetName("hPtSigma");
	
	/*
	TH1D* hPtSigma = new TH1D("hPtSigma","",nBins,ptBins);
	hPtSigma->SetBinContent(1,14619722.568099);
	hPtSigma->SetBinError(1,1679423.672859);
	hPtSigma->SetBinContent(2,2837699.722421);
	hPtSigma->SetBinError(2,176846.763128);
	hPtSigma->SetBinContent(3,704946.913442);
	hPtSigma->SetBinError(3,48853.139006);
	hPtSigma->SetBinContent(4,86755.486203);
	hPtSigma->SetBinError(4,5064.702126);
	*/

	for(int k=0;k<nBins;k++){
	  printf("p_t bin %.0f-%.0f Corrected Yield: %f Err: %f\n", ptBins[k], ptBins[k+1], hPtSigma->GetBinContent(k+1), hPtSigma->GetBinError(k+1));}

	
	Double_t xr[nBins], xrlow[nBins], xrhigh[nBins], ycross[nBins],ycrossstat[nBins],ycrosssysthigh[nBins],ycrosssystlow[nBins], yFONLL[nBins];
	Double_t yratiocrossFONLL[nBins], yratiocrossFONLLstat[nBins], yratiocrossFONLLsysthigh[nBins], yratiocrossFONLLsystlow[nBins];
	Double_t yFONLLrelunclow[nBins], yFONLLrelunchigh[nBins], yunity[nBins];

	std::cout<<"step2"<<std::endl;

	for(int i=0;i<nBins;i++)
	{
		gaeBplusReference->GetPoint(i,xr[i],yFONLL[i]);
		xrlow[i] = gaeBplusReference->GetErrorXlow(i);
		xrhigh[i] = gaeBplusReference->GetErrorXhigh(i);
		ycross[i] = hPtSigma->GetBinContent(i+1);
		ycrossstat[i] = hPtSigma->GetBinError(i+1);
		double systematic=0.;

		if (!isPbPb)
		  {
		    if(xr[i]<7) {systematic=0.01*9.74;}
		    systematic=0.01*systematicsPP(xr[i],0.);
		  }
		//else  systematic=0.01*systematicsPbPb(xr[i],1,centMin,centMax,0.);
		else  systematic=0.01*systematicsPbPb(xr[i],1,0,90,0.);
		//else  systematic=0.01*systematicsPbPb(xr[i],1,-1,-1,0.);//Bs bin

		ycrosssysthigh[i]= hPtSigma->GetBinContent(i+1)*systematic;
		ycrosssystlow[i]= hPtSigma->GetBinContent(i+1)*systematic;
		yratiocrossFONLL[i] = ycross[i]/yFONLL[i];
		yratiocrossFONLLstat[i] = ycrossstat[i]/yFONLL[i];
		yratiocrossFONLLsysthigh[i] = ycrosssysthigh[i]/yFONLL[i];
		yratiocrossFONLLsystlow[i] = ycrosssystlow[i]/yFONLL[i];
		yFONLLrelunclow[i] = gaeBplusReference->GetErrorYlow(i)/yFONLL[i];
		yFONLLrelunchigh[i] = gaeBplusReference->GetErrorYhigh(i)/yFONLL[i];
		yunity[i] = yFONLL[i]/yFONLL[i];
	}

	std::cout<<"step3"<<std::endl;

	TGraphAsymmErrors* gaeCrossSyst = new TGraphAsymmErrors(nBins,xr,ycross,xrlow,xrhigh,ycrosssystlow,ycrosssysthigh);
	gaeCrossSyst->SetName("gaeCrossSyst");
	gaeCrossSyst->SetMarkerStyle(20);
	gaeCrossSyst->SetMarkerSize(0.8);

	TGraphAsymmErrors* gaeRatioCrossFONLLstat = new TGraphAsymmErrors(nBins,xr,yratiocrossFONLL,xrlow,xrhigh,yratiocrossFONLLstat,yratiocrossFONLLstat);
	gaeRatioCrossFONLLstat->SetName("gaeRatioCrossFONLLstat");
	gaeRatioCrossFONLLstat->SetMarkerStyle(20);
	gaeRatioCrossFONLLstat->SetMarkerSize(0.8);

	TGraphAsymmErrors* gaeRatioCrossFONLLsyst= new TGraphAsymmErrors(nBins,xr,yratiocrossFONLL,xrlow,xrhigh,yratiocrossFONLLsystlow,yratiocrossFONLLsysthigh);
	gaeRatioCrossFONLLsyst->SetName("gaeRatioCrossFONLLsyst");
	gaeRatioCrossFONLLsyst->SetLineWidth(2);
	gaeRatioCrossFONLLsyst->SetLineColor(1);
	gaeRatioCrossFONLLsyst->SetFillColor(5);
	gaeRatioCrossFONLLsyst->SetFillStyle(0);

	TGraphAsymmErrors* gaeRatioCrossFONLLunity = new TGraphAsymmErrors(nBins,xr,yunity,xrlow,xrhigh,yFONLLrelunclow,yFONLLrelunchigh);
	gaeRatioCrossFONLLunity->SetName("gaeRatioCrossFONLLunity");
	gaeRatioCrossFONLLunity->SetLineWidth(2);
	gaeRatioCrossFONLLunity->SetLineColor(kOrange);
	gaeRatioCrossFONLLunity->SetFillColor(kOrange);
	gaeRatioCrossFONLLunity->SetFillStyle(1001);

	TCanvas* cSigma = new TCanvas("cSigma","",600,600);
	cSigma->SetFrameBorderMode(0);
	cSigma->SetFrameBorderMode(0);
	cSigma->Range(-1.989924,-0.2917772,25.49622,2.212202);
	cSigma->SetFillColor(0);
	cSigma->SetBorderMode(0);
	cSigma->SetBorderSize(2);
	cSigma->SetLeftMargin(0.1451613);
	cSigma->SetRightMargin(0.05443548);
	cSigma->SetTopMargin(0.08474576*tpadr);
	cSigma->SetBottomMargin(0.3*(1-tpadr));
	cSigma->SetFrameBorderMode(0);
	cSigma->SetFrameBorderMode(0);
	cSigma->SetLogy();
	cSigma->cd();
	TPad* pSigma = new TPad("pSigma","",0.,tpadpos,1.,1.);
	pSigma->SetFillColor(0);
	pSigma->SetBorderMode(0);
	pSigma->SetBorderSize(2);
	pSigma->SetLeftMargin(0.1451613);
	pSigma->SetRightMargin(0.05443548);
	pSigma->SetTopMargin(0.08474576*tpadr);
	pSigma->SetBottomMargin(0);
	pSigma->SetLogy();
	if(!isPbPb){
		pSigma->Draw();
		pSigma->cd();
	}

	//Float_t yaxisMin=1.1,yaxisMax=1.e+9;//PAS
	Float_t yaxisMin=1.e+2,yaxisMax=1.e+8;//paper 20170224
	if(isPbPb){
		yaxisMin=1.e+2;
	}
	TH2F* hemptySigma=new TH2F("hemptySigma","",50,ptBins[0]-5.,ptBins[nBins]+5.,10.,yaxisMin,yaxisMax);  
	hemptySigma->GetXaxis()->CenterTitle();
	hemptySigma->GetYaxis()->CenterTitle();
	//hemptySigma->GetYaxis()->SetTitle("#frac{d#sigma}{dp_{T}} ( pb GeV^{-1}c)");
	//if(isPbPb) hemptySigma->GetYaxis()->SetTitle("#frac{1}{T_{AA}} #frac{dN}{dp_{T}} ( pb GeV^{-1}c)");
	//hemptySigma->GetYaxis()->SetTitle("Corrected p_{T} differential yield (GeV^{-1}c)");
	hemptySigma->GetYaxis()->SetTitle("#frac{1}{T_{AA}} #frac{dN}{dp_{T}} (mb*GeV^{-1}c)");
	hemptySigma->GetXaxis()->SetTitle("p_{T} (GeV/c)");
	hemptySigma->GetXaxis()->SetTitleOffset(1.);
	hemptySigma->GetYaxis()->SetTitleOffset(1./tpadr);
	hemptySigma->GetXaxis()->SetTitleSize(0.12*tpadpos);
	hemptySigma->GetYaxis()->SetTitleSize(0.06*tpadr);
	hemptySigma->GetXaxis()->SetTitleFont(42);
	hemptySigma->GetYaxis()->SetTitleFont(42);
	hemptySigma->GetXaxis()->SetLabelFont(42);
	hemptySigma->GetYaxis()->SetLabelFont(42);
	hemptySigma->GetXaxis()->SetLabelSize(0.12*tpadpos);
	hemptySigma->GetYaxis()->SetLabelSize(0.06*tpadr);  
	hemptySigma->GetXaxis()->SetLabelOffset(0.005*tpadpos);
	hemptySigma->SetMaximum(2);
	hemptySigma->SetMinimum(0.);
	hemptySigma->Draw();

	gaeBplusReference->SetFillColor(kOrange);
	gaeBplusReference->SetFillStyle(1001); 
	gaeBplusReference->SetLineWidth(3);
	gaeBplusReference->SetLineColor(kOrange);
	//gaeBplusReference->Draw("5same");
	//if(!isPbPb)gaeBplusReference->Draw("5same");
	hPtSigma->SetLineColor(1);
	hPtSigma->SetLineWidth(2);
	hPtSigma->SetMarkerStyle(20);
	hPtSigma->SetMarkerSize(1.2*tpadr);
	hPtSigma->Draw("epsame"); 
	gaeCrossSyst->SetFillColor(1);
	gaeCrossSyst->SetFillStyle(0); 
	gaeCrossSyst->SetLineWidth(2);
	gaeCrossSyst->SetLineColor(1);
	gaeCrossSyst->Draw("5same");  

	//TLatex* texCms = new TLatex(0.16,0.95, "#scale[1.25]{CMS}");
	TLatex* texCms = new TLatex(0.52,1-(1-0.88)*tpadr, "CMS");
	texCms->SetNDC();
	texCms->SetTextAlign(13);
	texCms->SetTextSize(0.08*tpadr);
	texCms->SetTextFont(62);
	texCms->Draw();

	//TLatex* texPrel = new TLatex(0.20,0.95, "#scale[1.25]Preliminary");
	TLatex* texPrel = new TLatex(0.30,0.89, "Preliminary");
	texPrel->SetNDC();
	texPrel->SetTextAlign(13);
	texPrel->SetTextSize(0.050);
	texPrel->SetTextFont(52);
	//texPrel->Draw();

	TString text;
	if (label=="PbPb") { text="1.5 nb^{-1} (PbPb 5.02 TeV)";}
	else {text="28.0 pb^{-1} (pp 5.02 TeV)";}
	TLatex* texlumi = new TLatex(0.90,1-(1-0.936)*tpadr,text.Data());
	texlumi->SetNDC();
	texlumi->SetTextAlign(31);
	texlumi->SetTextFont(42);
	texlumi->SetTextSize(0.050*tpadr);
	texlumi->SetLineWidth(2);
	texlumi->Draw();

	TLatex* texCol = new TLatex(0.94,0.95, Form("%s #sqrt{s_{NN}} = 5.02 TeV",label.Data()));
	texCol->SetNDC();
	texCol->SetTextAlign(32);
	texCol->SetTextSize(0.04*tpadr);
	texCol->SetTextFont(42);
	//texCol->Draw();

	TString texper="%";
	TLatex* texCent = new TLatex(0.53,0.600,Form("Cent. %.0f-%.0f%s",centMin,centMax,texper.Data()));
	texCent->SetNDC();
	texCent->SetTextFont(42);
	texCent->SetTextSize(0.04);
	if(isPbPb) texCent->Draw();

	TLatex* texY = new TLatex(0.53,1-(1-0.65)*tpadr,"|y| < 2.4");
	texY->SetNDC();
	texY->SetTextFont(42);
	texY->SetTextSize(0.05*tpadr);
	texY->SetLineWidth(2);
	texY->Draw();

	//TLatex* texB = new TLatex(0.77,0.82,"B^{#plus}+B^{#minus}");
	TLatex* texB = new TLatex(0.70,1-(1-0.82)*tpadr,"B^{+}");
	texB->SetNDC();
	texB->SetTextFont(62);
	texB->SetTextSize(0.07*tpadr);
	texB->SetLineWidth(2);
	texB->Draw();

	TLatex* texGlobal = new TLatex(0.53,0.59,Form("Global uncert. %.1f%s",normalizationUncertaintyForPP(),texper.Data()));
	if(isPbPb)  texGlobal = new TLatex(0.53,1-(1-0.59)*tpadr,Form("Global uncert. #plus%.1f, #minus%.1f%s",normalizationUncertaintyForPbPb(1),normalizationUncertaintyForPbPb(0),texper.Data()));
	texGlobal->SetNDC();
	texGlobal->SetTextFont(42);
	texGlobal->SetTextSize(0.05*tpadr);
	texGlobal->SetLineWidth(2);
	if(!addpbpb) texGlobal->Draw();

	TLegend* leg_CS = new TLegend(0.52,1-(1-0.70)*tpadr,0.85,1-(1-0.80)*tpadr);
	leg_CS->SetBorderSize(0);
	leg_CS->SetFillStyle(0);
	leg_CS->SetTextSize(0.05*tpadr);
	leg_CS->AddEntry(hPtSigma,"Data","pf");
	//leg_CS->AddEntry(gaeBplusReference,"FONLL pp ref.","f");//PAS
	//if(!isPbPb) leg_CS->AddEntry(gaeBplusReference,"FONLL","f");//paper
	leg_CS->Draw("same");

	if(addpbpb){
	    TFile* filepbpb = new TFile("ROOTfiles/CrossSectionPbPb.root");
	    TGraphAsymmErrors* gaeCrossSyst_PbPb = (TGraphAsymmErrors*)filepbpb->Get("gaeCrossSyst");
		gaeCrossSyst_PbPb->SetLineColor(2);
		gaeCrossSyst_PbPb->Draw("5same");
	    TH1F* hPtSigma_PbPb = (TH1F*)filepbpb->Get("hPtSigma");
	    hPtSigma_PbPb->SetLineColor(2);
	    hPtSigma_PbPb->SetLineWidth(2);
	    hPtSigma_PbPb->SetMarkerColor(2);
	    hPtSigma_PbPb->SetMarkerStyle(21);
	    hPtSigma_PbPb->SetMarkerSize(1.2*tpadr);
		hPtSigma_PbPb->Draw("epsame");
	    leg_CS = new TLegend(0.52,1-(1-0.70)*tpadr,0.85,1-(1-0.85)*tpadr);
	    leg_CS->SetBorderSize(0);
	    leg_CS->SetFillStyle(0);
	    leg_CS->SetTextSize(0.05*tpadr);
	    leg_CS->AddEntry(hPtSigma,"Data pp","pf");
	    leg_CS->AddEntry(hPtSigma_PbPb,"Data PbPb","pf");
	    leg_CS->AddEntry(gaeBplusReference,"FONLL pp ref.","f");//PAS
	    leg_CS->Draw("same");
	    hemptySigma->GetYaxis()->SetTitle("#frac{d#sigma}{dp_{T}} ( pb GeV^{-1}c)");
		texGlobal = new TLatex(0.53,0.594,Form("Global uncert."));
		TLatex* texGlobal_pp = new TLatex(0.53,0.55,Form("pp: %.1f%s",normalizationUncertaintyForPP(),texper.Data()));
		TLatex* texGlobal_PbPb = new TLatex(0.53,0.50,Form("PbPb: #plus%.1f, #minus%.1f%s",normalizationUncertaintyForPbPb(1),normalizationUncertaintyForPbPb(0),texper.Data()));
	    texGlobal->SetNDC();
	    texGlobal->SetTextFont(42);
	    texGlobal->SetTextSize(0.05*tpadr);
	    texGlobal->SetLineWidth(2);
	    texGlobal->Draw();
	    texGlobal_pp->SetNDC();
	    texGlobal_pp->SetTextFont(42);
	    texGlobal_pp->SetTextSize(0.05*tpadr);
	    texGlobal_pp->SetLineWidth(2);
	    texGlobal_pp->Draw();
	    texGlobal_PbPb->SetNDC();
	    texGlobal_PbPb->SetTextFont(42);
	    texGlobal_PbPb->SetTextSize(0.05*tpadr);
	    texGlobal_PbPb->SetLineWidth(2);
	    texGlobal_PbPb->Draw();
	}

	cSigma->cd();
	TPad* pRatio = new TPad("pRatio","",0.,0.,1.,tpadpos);
	pRatio->SetLeftMargin(0.1451613);
	pRatio->SetRightMargin(0.05443548);
	pRatio->SetTopMargin(0);
	pRatio->SetBottomMargin(0.30);//0.25

	//TH2F* hemptyRatio=new TH2F("hemptyRatio","",50,ptBins[0]-5.,ptBins[nBins]+5.,10.,0.,3.1);//PAS
	//TH2F* hemptyRatio=new TH2F("hemptyRatio","",50,ptBins[0]-5.,ptBins[nBins]+5.,10.,0.,2.1);//
	TH2F* hemptyRatio=new TH2F("hemptyRatio","",50,ptBins[0]-5.,ptBins[nBins]+5.,10.,0.2,1.8);//paper
	hemptyRatio->GetXaxis()->SetTitle("p_{T} (GeV/c)");
	hemptyRatio->GetXaxis()->CenterTitle();
	hemptyRatio->GetYaxis()->CenterTitle();
	hemptyRatio->GetYaxis()->SetTitle("Data / FONLL");
	hemptyRatio->GetXaxis()->SetTitleOffset(1.);
	hemptyRatio->GetYaxis()->SetTitleOffset(0.5);
	hemptyRatio->GetXaxis()->SetTitleSize(0.12);
	hemptyRatio->GetYaxis()->SetTitleSize(0.12);
	hemptyRatio->GetXaxis()->SetTitleFont(42);
	hemptyRatio->GetYaxis()->SetTitleFont(42);
	hemptyRatio->GetXaxis()->SetLabelFont(42);
	hemptyRatio->GetYaxis()->SetLabelFont(42);
	hemptyRatio->GetXaxis()->SetLabelSize(0.12);//0.1
	hemptyRatio->GetYaxis()->SetLabelSize(0.12);//0.1  
	hemptyRatio->GetYaxis()->SetNdivisions(505);
	hemptyRatio->GetXaxis()->SetTickLength(0.03/tpadpos);

	TLine* l = new TLine(ptBins[0]-5.,1,ptBins[nBins]+5.,1);
	l->SetLineWidth(1);
	l->SetLineStyle(2);

	if(!isPbPb){
		pRatio->Draw();
		pRatio->cd();
		hemptyRatio->Draw();
		l->Draw("same");
		gaeRatioCrossFONLLunity->Draw("5same");
		gaeRatioCrossFONLLstat->Draw("epsame");
		gaeRatioCrossFONLLsyst->Draw("5same");
	}

    if(addpbpb){
	    hemptyRatio->GetYaxis()->SetTitle("pp / FONLL");
	}

	TString _postfix = "";
	if(doDataCor==1) _postfix += "_EFFCOR";
	if(addpbpb) _postfix += "_AddPbPb";
	if(!isPbPb) cSigma->SaveAs(Form("plotCrossSection/canvasSigmaBplusRatio%s%s.pdf",label.Data(),_postfix.Data()));
	else cSigma->SaveAs(Form("plotCrossSection/canvasSigmaBplusRatio%s_cent%.0f-%.0f%s.pdf",label.Data(),centMin,centMax,_postfix.Data()));
	if(!isPbPb) cSigma->SaveAs(Form("plotCrossSection/canvasSigmaBplusRatio%s%s.png",label.Data(),_postfix.Data()));
	else cSigma->SaveAs(Form("plotCrossSection/canvasSigmaBplusRatio%s_cent%.0f-%.0f%s.png",label.Data(),centMin,centMax,_postfix.Data()));
	if(!isPbPb) cSigma->SaveAs(Form("plotCrossSection/canvasSigmaBplusRatio%s%s.C",label.Data(),_postfix.Data()));
	else cSigma->SaveAs(Form("plotCrossSection/canvasSigmaBplusRatio%s_cent%.0f-%.0f%s.C",label.Data(),centMin,centMax,_postfix.Data()));

	TCanvas* cEff = new TCanvas("cEff","",550,500);
	TH2F* hemptyEff=new TH2F("hemptyEff","",50,0.,110.,10.,0,1.);  
	hemptyEff->GetXaxis()->CenterTitle();
	hemptyEff->GetYaxis()->CenterTitle();
	hemptyEff->GetYaxis()->SetTitle("#alpha x #epsilon_{reco} x #epsilon_{sel} ");
	hemptyEff->GetXaxis()->SetTitle("p_{T} (GeV/c)");
	hemptyEff->GetXaxis()->SetTitleOffset(0.9);
	hemptyEff->GetYaxis()->SetTitleOffset(1.05);
	hemptyEff->GetXaxis()->SetTitleSize(0.045);
	hemptyEff->GetYaxis()->SetTitleSize(0.045);
	hemptyEff->GetXaxis()->SetTitleFont(42);
	hemptyEff->GetYaxis()->SetTitleFont(42);
	hemptyEff->GetXaxis()->SetLabelFont(42);
	hemptyEff->GetYaxis()->SetLabelFont(42);
	hemptyEff->GetXaxis()->SetLabelSize(0.04);
	hemptyEff->GetYaxis()->SetLabelSize(0.04);  
	hemptyEff->SetMaximum(2);
	hemptyEff->SetMinimum(0.);
	hemptyEff->Draw();
	cEff->cd();
	hemptyEff->Draw();
	hEff->SetLineWidth(2);
	hEff->SetLineColor(1);
	hEff->SetMarkerStyle(20);
	hEff->SetMarkerSize(1.2);
	hEff->Draw("same");
	if(!isPbPb) cEff->SaveAs(Form("plotOthers/efficiency%s%s.pdf",label.Data(),_postfix.Data()));
	else cEff->SaveAs(Form("plotOthers/efficiency%s_cent%.0f-%.0f%s.pdf",label.Data(),centMin,centMax,_postfix.Data()));
	if(!isPbPb) cEff->SaveAs(Form("plotOthers/efficiency%s%s.png",label.Data(),_postfix.Data()));
	else cEff->SaveAs(Form("plotOthers/efficiency%s_cent%.0f-%.0f%s.png",label.Data(),centMin,centMax,_postfix.Data()));

	TFile *outputfile=new TFile(outputplot.Data(),"recreate");
	outputfile->cd();
	//gaeCrossSyst->Write();
	//gaeRatioCrossFONLLstat->Write();
	//gaeBplusReference->Write();
	hPtSigma->Write();
	//gaeRatioCrossFONLLstat->Write();
	//gaeRatioCrossFONLLsyst->Write();
	//gaeRatioCrossFONLLunity->Write();
	//hEff->Write();

}


int main(int argc, char *argv[])
{
	if(argc==11)
	{
		CrossSectionRatio(argv[1], argv[2], argv[3],argv[4],atoi(argv[5]),argv[6],atoi(argv[7]),atof(argv[8]),atof(argv[9]),atof(argv[10]));
		return 0;
	}
	else if(argc==9)
	{
		CrossSectionRatio(argv[1], argv[2], argv[3],argv[4],atoi(argv[5]),argv[6],atoi(argv[7]),atof(argv[8]));
		return 0;
	}
	else
	{
		std::cout << "Wrong number of inputs" << std::endl;
		return 1;
	}

}
